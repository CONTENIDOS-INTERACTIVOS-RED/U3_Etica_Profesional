{"remainingRequest":"/home/runner/work/U3_Etica_Profesional/U3_Etica_Profesional/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Etica_Profesional/U3_Etica_Profesional/src/views/curso/Tema1.vue?vue&type=template&id=61476056&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Etica_Profesional/U3_Etica_Profesional/src/views/curso/Tema1.vue","mtime":1740289159881},{"path":"/home/runner/work/U3_Etica_Profesional/U3_Etica_Profesional/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Etica_Profesional/U3_Etica_Profesional/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Etica_Profesional/U3_Etica_Profesional/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Etica_Profesional/U3_Etica_Profesional/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Etica_Profesional/U3_Etica_Profesional/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}